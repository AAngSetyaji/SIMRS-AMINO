/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package khanzacetakantrianloket;

import fungsi.akses;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrintManager;

/**
 *
 * @author firka
 */
public class LoketCetak extends javax.swing.JFrame {
    private final Connection koneksi=koneksiDB.condb();
    private final validasi Valid=new validasi();
    private final sekuel Sequel=new sekuel();
    private PreparedStatement ps;
    private ResultSet rs;
    /**
     * Creates new form LoketCetak
     */
    public LoketCetak() {
        initComponents();
        jam();
        this.setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        panelGray1 = new widget.PanelGray();
        lblUMUM = new widget.Label();
        label4 = new widget.Label();
        btUmum = new widget.Button();
        label1 = new widget.Label();
        panelGray2 = new widget.PanelGray();
        lblBPJS = new widget.Label();
        btBPJS = new widget.Button();
        label3 = new widget.Label();
        label2 = new widget.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBackground(new java.awt.Color(0, 51, 51));
        internalFrame1.setLayout(new javax.swing.BoxLayout(internalFrame1, javax.swing.BoxLayout.LINE_AXIS));

        panelGray1.setLayout(new java.awt.BorderLayout());

        lblUMUM.setForeground(new java.awt.Color(255, 102, 0));
        lblUMUM.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUMUM.setText("001");
        lblUMUM.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        lblUMUM.setMaximumSize(new java.awt.Dimension(260, 182));
        lblUMUM.setMinimumSize(new java.awt.Dimension(240, 182));
        lblUMUM.setPreferredSize(new java.awt.Dimension(260, 182));
        panelGray1.add(lblUMUM, java.awt.BorderLayout.CENTER);

        label4.setForeground(new java.awt.Color(0, 102, 0));
        label4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label4.setText("UMUM");
        label4.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        panelGray1.add(label4, java.awt.BorderLayout.PAGE_START);

        btUmum.setForeground(new java.awt.Color(0, 0, 0));
        btUmum.setText("CETAK");
        btUmum.setFont(new java.awt.Font("Tahoma", 1, 100)); // NOI18N
        btUmum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUmumActionPerformed(evt);
            }
        });
        panelGray1.add(btUmum, java.awt.BorderLayout.PAGE_END);

        label1.setForeground(new java.awt.Color(255, 102, 0));
        label1.setText("A");
        label1.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        label1.setMaximumSize(new java.awt.Dimension(150, 182));
        label1.setMinimumSize(new java.awt.Dimension(140, 182));
        label1.setPreferredSize(new java.awt.Dimension(260, 182));
        panelGray1.add(label1, java.awt.BorderLayout.LINE_START);

        internalFrame1.add(panelGray1);

        panelGray2.setLayout(new java.awt.BorderLayout());

        lblBPJS.setForeground(new java.awt.Color(255, 102, 0));
        lblBPJS.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBPJS.setText("001");
        lblBPJS.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        lblBPJS.setPreferredSize(new java.awt.Dimension(260, 182));
        panelGray2.add(lblBPJS, java.awt.BorderLayout.CENTER);

        btBPJS.setForeground(new java.awt.Color(0, 0, 0));
        btBPJS.setText("CETAK");
        btBPJS.setFont(new java.awt.Font("Tahoma", 1, 100)); // NOI18N
        btBPJS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBPJSActionPerformed(evt);
            }
        });
        panelGray2.add(btBPJS, java.awt.BorderLayout.PAGE_END);

        label3.setForeground(new java.awt.Color(0, 102, 153));
        label3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label3.setText("BPJS");
        label3.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        panelGray2.add(label3, java.awt.BorderLayout.PAGE_START);

        label2.setForeground(new java.awt.Color(255, 102, 0));
        label2.setText("B");
        label2.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        label2.setPreferredSize(new java.awt.Dimension(260, 182));
        panelGray2.add(label2, java.awt.BorderLayout.LINE_START);

        internalFrame1.add(panelGray2);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jam(){
        ActionListener taskPerformer = new ActionListener(){
            private int nilai_jam;
            private int nilai_menit;
            private int nilai_detik;
            public void actionPerformed(ActionEvent e) {
                String nol_jam = "";
                String nol_menit = "";
                String nol_detik = "";
                Date now = Calendar.getInstance().getTime();
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");  
                LocalDateTime sekarang = LocalDateTime.now();  
//                LabelTanggal.setText("Antrian Loket Pendaftaran Tanggal : "+dtf.format(sekarang)); 
//                LabelTanggal1.setText("Antrian Loket Pendaftaran Tanggal : "+dtf.format(sekarang)); 
                // Mengambil nilaj JAM, MENIT, dan DETIK Sekarang
                nilai_jam = now.getHours();
                nilai_menit = now.getMinutes();
                nilai_detik = now.getSeconds();
                // Jika nilai JAM lebih kecil dari 10 (hanya 1 digit)
                if (nilai_jam <= 9) {
                    // Tambahkan "0" didepannya
                    nol_jam = "0";
                }
                // Jika nilai MENIT lebih kecil dari 10 (hanya 1 digit)
                if (nilai_menit <= 9) {
                    // Tambahkan "0" didepannya
                    nol_menit = "0";
                }
                // Jika nilai DETIK lebih kecil dari 10 (hanya 1 digit)
                if (nilai_detik <= 9) {
                    // Tambahkan "0" didepannya
                    nol_detik = "0";
                }
                // Membuat String JAM, MENIT, DETIK
                String jam = nol_jam + Integer.toString(nilai_jam);
                String menit = nol_menit + Integer.toString(nilai_menit);
                String detik = nol_detik + Integer.toString(nilai_detik);
                if(menit.equals("01")&&detik.equals("01")){
                    autonomer();
                }
            }
        };
        // Timer
        new Timer(1000, taskPerformer).start();
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        autonomer();
        try{            
            ps=koneksi.prepareStatement("select nama_instansi, alamat_instansi, kabupaten, propinsi, aktifkan, wallpaper,kontak,email,logo from setting");
            try {
                rs=ps.executeQuery();
                while(rs.next()){
                    akses.setnamars(rs.getString("nama_instansi"));
                    akses.setalamatrs(rs.getString("alamat_instansi"));
                    akses.setkabupatenrs(rs.getString("kabupaten"));
                    akses.setpropinsirs(rs.getString("propinsi"));
                    akses.setkontakrs(rs.getString("kontak"));
                    akses.setemailrs(rs.getString("email"));
                }  
            } catch (Exception e) {
                System.out.println(e);
            } finally{
                if(rs!=null){
                    rs.close();
                }
                if(ps!=null){
                    ps.close();
                }
            }                 
        }catch(Exception e){
            System.out.println("Notifikasi : Silahkan Set Aplikasi "+e);
        }
    }//GEN-LAST:event_formWindowOpened

    private void btUmumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUmumActionPerformed
        String jns_pasien = "UMUM";
        if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+lblUMUM.getText()+"','A'","Nomor Antrian")==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Map<String, Object> param = new HashMap<>();
            param.put("namars",akses.getnamars());
            param.put("alamatrs",akses.getalamatrs());
            param.put("kotars",akses.getkabupatenrs());
            param.put("propinsirs",akses.getpropinsirs());
            param.put("kontakrs",akses.getkontakrs());
            param.put("emailrs",akses.getemailrs());
            param.put("jns_pas","UMUM");
//            param.put("jns_pas",jns_pasien);
//            Valid.MyReportqry("rptAntriLoket.jasper","report","::[ Antrian Loket ]::",
//                   "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
            try {
                String printFileName = null;
                String sourceFileName = "./report/rptAntriLoket.jasper";
                String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,concat(antriloketcetak.loket,antriloketcetak.nomor) as nomor,"
                        + "antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.loket like ? and antriloketcetak.nomor='"+lblUMUM.getText()+"' ";
                ps = koneksi.prepareStatement(sql);
                ps.setString(1, "%A%");
                rs = ps.executeQuery();
                JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
	//JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                JasperPrintManager.printReport(printFileName, false);
                autonomer();
                }catch(Exception e){
                    System.out.println("Error : "+e.getMessage());
                }
                
            this.setCursor(Cursor.getDefaultCursor());
            autonomer();
        }else{
            autonomer();
            if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+lblUMUM.getText()+"','A","Nomor Antrian")==true){
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Map<String, Object> param = new HashMap<>();
                param.put("namars",akses.getnamars());
                param.put("alamatrs",akses.getalamatrs());
                param.put("kotars",akses.getkabupatenrs());
                param.put("propinsirs",akses.getpropinsirs());
                param.put("kontakrs",akses.getkontakrs());
                param.put("emailrs",akses.getemailrs());
                param.put("jns_pas","UMUM");
//                param.put("jns_pas",jns_pasien);
//                Valid.MyReportqry("rptAntriLoket.jasper","report","::[ Antrian Loket ]::",
//                       "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
                try {
                String printFileName = null;
                String sourceFileName = "./report/rptAntriLoket.jasper";
                String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,concat(antriloketcetak.loket,antriloketcetak.nomor) as nomor,"
                        + "antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.loket like ? and antriloketcetak.nomor='"+lblUMUM.getText()+"' ";
                ps = koneksi.prepareStatement(sql);
                ps.setString(1, "%A%");
                rs = ps.executeQuery();
                JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
	//JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                JasperPrintManager.printReport(printFileName, false);
                autonomer();
                }catch(Exception e){
                    System.out.println("Error : "+e.getMessage());
                }
                this.setCursor(Cursor.getDefaultCursor());
                autonomer();
            }else{
                autonomer();
                if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+lblUMUM.getText()+"','A","Nomor Antrian")==true){
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    Map<String, Object> param = new HashMap<>();
                    param.put("namars",akses.getnamars());
                    param.put("alamatrs",akses.getalamatrs());
                    param.put("kotars",akses.getkabupatenrs());
                    param.put("propinsirs",akses.getpropinsirs());
                    param.put("kontakrs",akses.getkontakrs());
                    param.put("emailrs",akses.getemailrs());
                    param.put("jns_pas","UMUM");
//                    param.put("jns_pas",jns_pasien);
//                    Valid.MyReportqry("rptAntriLoket.jrxml","report","::[ Antrian Loket ]::",
//                           "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
//                    this.setCursor(Cursor.getDefaultCursor());
                    try {
                        String printFileName = null;
                        String sourceFileName = "./report/rptAntriLoket.jasper";
                        String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,concat(antriloketcetak.loket,antriloketcetak.nomor) as nomor,"
                        + "antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.loket like ? and antriloketcetak.nomor='"+lblUMUM.getText()+"' ";
                        ps = koneksi.prepareStatement(sql);
                        ps.setString(1, "%A%");
                        rs = ps.executeQuery();
                        JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                        printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
                //JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                        JasperPrintManager.printReport(printFileName, false);
                        autonomer();
                        }catch(Exception e){
                            System.out.println("Error : "+e.getMessage());
                        }             
                }
            }
        }
    }//GEN-LAST:event_btUmumActionPerformed

    private void btBPJSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBPJSActionPerformed
        String jns_pasien = "BPJS";
        if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+lblBPJS.getText()+"','B'","Nomor Antrian")==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Map<String, Object> param = new HashMap<>();
            param.put("namars",akses.getnamars());
            param.put("alamatrs",akses.getalamatrs());
            param.put("kotars",akses.getkabupatenrs());
            param.put("propinsirs",akses.getpropinsirs());
            param.put("kontakrs",akses.getkontakrs());
            param.put("emailrs",akses.getemailrs());
            param.put("jns_pas","BPJS");
//            Valid.MyReportqry("rptAntriLoket.jasper","report","::[ Antrian Loket ]::",
//                   "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
            try {
                String printFileName = null;
                String sourceFileName = "./report/rptAntriLoket.jasper";
                String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,concat(antriloketcetak.loket,antriloketcetak.nomor) as nomor,"
                        + "antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.loket like ? and antriloketcetak.nomor='"+lblBPJS.getText()+"' ";
                ps = koneksi.prepareStatement(sql);
                ps.setString(1, "%B%");
                rs = ps.executeQuery();
                JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
	//JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                JasperPrintManager.printReport(printFileName, false);
                autonomer();
                }catch(Exception e){
                    System.out.println("Error : "+e.getMessage());
                }
                
            this.setCursor(Cursor.getDefaultCursor());
            autonomer();
        }else{
            autonomer();
            if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+lblBPJS.getText()+"','B","Nomor Antrian")==true){
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Map<String, Object> param = new HashMap<>();
                param.put("namars",akses.getnamars());
                param.put("alamatrs",akses.getalamatrs());
                param.put("kotars",akses.getkabupatenrs());
                param.put("propinsirs",akses.getpropinsirs());
                param.put("kontakrs",akses.getkontakrs());
                param.put("emailrs",akses.getemailrs());
                param.put("jns_pas","BPJS");
//                Valid.MyReportqry("rptAntriLoket.jasper","report","::[ Antrian Loket ]::",
//                       "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
                try {
                String printFileName = null;
                String sourceFileName = "./report/rptAntriLoket.jasper";
                String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,concat(antriloketcetak.loket,antriloketcetak.nomor) as nomor,"
                        + "antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.loket like ? and antriloketcetak.nomor='"+lblBPJS.getText()+"' ";
                ps = koneksi.prepareStatement(sql);
                ps.setString(1, "%B%");
                rs = ps.executeQuery();
                JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
	//JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                JasperPrintManager.printReport(printFileName, false);
                autonomer();
                }catch(Exception e){
                    System.out.println("Error : "+e.getMessage());
                }
                this.setCursor(Cursor.getDefaultCursor());
                autonomer();
            }else{
                autonomer();
                if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+lblBPJS.getText()+"','B","Nomor Antrian")==true){
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    Map<String, Object> param = new HashMap<>();
                    param.put("namars",akses.getnamars());
                    param.put("alamatrs",akses.getalamatrs());
                    param.put("kotars",akses.getkabupatenrs());
                    param.put("propinsirs",akses.getpropinsirs());
                    param.put("kontakrs",akses.getkontakrs());
                    param.put("emailrs",akses.getemailrs());
                    param.put("jns_pas","BPJS");
//                    Valid.MyReportqry("rptAntriLoket.jrxml","report","::[ Antrian Loket ]::",
//                           "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
//                    this.setCursor(Cursor.getDefaultCursor());
                    try {
                        String printFileName = null;
                        String sourceFileName = "./report/rptAntriLoket.jasper";
                        String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,concat(antriloketcetak.loket,antriloketcetak.nomor) as nomor,"
                        + "antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.loket like ? and antriloketcetak.nomor='"+lblBPJS.getText()+"' ";
                        ps = koneksi.prepareStatement(sql);
                        ps.setString(1, "%B%");
                        rs = ps.executeQuery();
                        JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                        printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
                //JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                        JasperPrintManager.printReport(printFileName, false);
                        autonomer();
                        }catch(Exception e){
                            System.out.println("Error : "+e.getMessage());
                        }             
                }
            }
        }
    }//GEN-LAST:event_btBPJSActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void autonomer(){
        Valid.autoloketumum("select ifnull(MAX(CONVERT(antriloketcetak.nomor,signed)),0) from antriloketcetak where antriloketcetak.tanggal=current_date() and loket='A'","",3,lblUMUM);
        Valid.autoloketbpjs("select ifnull(MAX(CONVERT(antriloketcetak.nomor,signed)),0) from antriloketcetak where antriloketcetak.tanggal=current_date() and loket='B'","",3,lblBPJS);
        
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoketCetak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoketCetak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoketCetak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoketCetak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoketCetak().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button btBPJS;
    private widget.Button btUmum;
    private widget.InternalFrame internalFrame1;
    private widget.Label label1;
    private widget.Label label2;
    private widget.Label label3;
    private widget.Label label4;
    private widget.Label lblBPJS;
    private widget.Label lblUMUM;
    private widget.PanelGray panelGray1;
    private widget.PanelGray panelGray2;
    // End of variables declaration//GEN-END:variables
}
