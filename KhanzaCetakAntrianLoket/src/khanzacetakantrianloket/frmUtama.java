/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khanzacetakantrianloket;

import fungsi.akses;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterJob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.io.*;
import javax.print.PrintService;
import javax.swing.Timer;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import javax.print.PrintService;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.PageRanges;
import javax.swing.JFrame;
import javax.swing.JSplitPane;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

/**
 *
 * @author windiartonugroho
 */
public class frmUtama extends javax.swing.JFrame {
    private final Connection koneksi=koneksiDB.condb();
    private final validasi Valid=new validasi();
    private final sekuel Sequel=new sekuel();
    private PreparedStatement ps;
    private ResultSet rs;
    
    
    /**
     * Creates new form frmUtama
     */
    public frmUtama() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        
        jam();
        
            
    JFrame frame = new JFrame("Split Frame Example");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(901, 554);

    // Buat split pane dengan orientasi horizontal
    JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, internalFrame1, internalFrame2);

    // Atur ukuran default bagi setiap panel
    int lebarFrame = frame.getWidth(); // Dapatkan lebar total frame
    splitPane.setDividerLocation(lebarFrame / 2); // Set divider location ke nilai setengah dari lebar frame

    // Tambahkan split pane ke frame utama
    frame.getContentPane().add(splitPane);

    // Konfigurasi frame utama
    frame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        internalFrame2 = new widget.InternalFrame();
        panelGray2 = new widget.PanelGray();
        BtnCetak1 = new widget.Button();
        LabelNomor1 = new widget.Label();
        panelGray1 = new widget.PanelGray();
        BtnCetak = new widget.Button();
        LabelNomor = new widget.Label();
        LabelTanggal = new widget.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIMKES Khanza Cetak Antrian Loket");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setWarnaAtas(new java.awt.Color(0, 50, 0));
        internalFrame1.setWarnaBawah(new java.awt.Color(0, 130, 0));
        internalFrame1.setLayout(new java.awt.BorderLayout());
        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        internalFrame2.setBackground(new java.awt.Color(255, 255, 255));
        internalFrame2.setPreferredSize(new java.awt.Dimension(901, 554));
        internalFrame2.setWarnaAtas(new java.awt.Color(0, 50, 0));
        internalFrame2.setWarnaBawah(new java.awt.Color(0, 130, 0));
        internalFrame2.setLayout(new java.awt.BorderLayout());

        panelGray2.setPreferredSize(new java.awt.Dimension(181, 165));
        panelGray2.setLayout(new java.awt.BorderLayout());

        BtnCetak1.setForeground(new java.awt.Color(0, 102, 0));
        BtnCetak1.setText("UMUM");
        BtnCetak1.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        BtnCetak1.setGlassColor(new java.awt.Color(255, 255, 204));
        BtnCetak1.setMaximumSize(new java.awt.Dimension(186, 40));
        BtnCetak1.setMinimumSize(new java.awt.Dimension(186, 40));
        BtnCetak1.setPreferredSize(new java.awt.Dimension(158, 60));
        BtnCetak1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCetak1ActionPerformed(evt);
            }
        });
        panelGray2.add(BtnCetak1, java.awt.BorderLayout.PAGE_END);

        LabelNomor1.setForeground(new java.awt.Color(255, 153, 0));
        LabelNomor1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomor1.setText("001");
        LabelNomor1.setFont(new java.awt.Font("Tahoma", 0, 100)); // NOI18N
        panelGray2.add(LabelNomor1, java.awt.BorderLayout.CENTER);

        internalFrame2.add(panelGray2, java.awt.BorderLayout.PAGE_END);

        panelGray1.setBackground(new java.awt.Color(0, 102, 51));
        panelGray1.setForeground(new java.awt.Color(0, 102, 0));
        panelGray1.setLayout(new java.awt.BorderLayout());

        BtnCetak.setBackground(new java.awt.Color(0, 102, 51));
        BtnCetak.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnCetak.setForeground(new java.awt.Color(255, 102, 0));
        BtnCetak.setText("BPJS");
        BtnCetak.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        BtnCetak.setGlassColor(new java.awt.Color(255, 255, 204));
        BtnCetak.setPreferredSize(new java.awt.Dimension(158, 60));
        BtnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCetakActionPerformed(evt);
            }
        });
        panelGray1.add(BtnCetak, java.awt.BorderLayout.PAGE_END);

        LabelNomor.setBackground(new java.awt.Color(0, 102, 51));
        LabelNomor.setForeground(new java.awt.Color(255, 153, 0));
        LabelNomor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomor.setText("001");
        LabelNomor.setFont(new java.awt.Font("Tahoma", 0, 100)); // NOI18N
        panelGray1.add(LabelNomor, java.awt.BorderLayout.CENTER);

        internalFrame2.add(panelGray1, java.awt.BorderLayout.CENTER);

        getContentPane().add(internalFrame2, java.awt.BorderLayout.CENTER);

        LabelTanggal.setForeground(new java.awt.Color(255, 255, 51));
        LabelTanggal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTanggal.setText("Antrian Loket Pendaftaran Tanggal :");
        LabelTanggal.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        getContentPane().add(LabelTanggal, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCetakActionPerformed
//        PrintService nm_printer = findPrintService("EPSON TM-T70 Receipt"); 
//        PrinterJob job = PrinterJob.getPrinterJob();
        if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+LabelNomor.getText()+"'","Nomor Antrian")==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Map<String, Object> param = new HashMap<>();
            param.put("namars",akses.getnamars());
            param.put("alamatrs",akses.getalamatrs());
            param.put("kotars",akses.getkabupatenrs());
            param.put("propinsirs",akses.getpropinsirs());
            param.put("kontakrs",akses.getkontakrs());
            param.put("emailrs",akses.getemailrs());
//            Valid.MyReportqry("rptAntriLoket.jasper","report","::[ Antrian Loket ]::",
//                   "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
            try {
                String printFileName = null;
                String sourceFileName = "./report/rptAntriLoket.jasper";
                String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ";
                ps = koneksi.prepareStatement(sql);
                rs = ps.executeQuery();
                JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
	//JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                JasperPrintManager.printReport(printFileName, false);
                autonomer();
                }catch(Exception e){
                    System.out.println("Error : "+e.getMessage());
                }
                
            this.setCursor(Cursor.getDefaultCursor());
            autonomer();
        }else{
            autonomer();
            if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+LabelNomor.getText()+"'","Nomor Antrian")==true){
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Map<String, Object> param = new HashMap<>();
                param.put("namars",akses.getnamars());
                param.put("alamatrs",akses.getalamatrs());
                param.put("kotars",akses.getkabupatenrs());
                param.put("propinsirs",akses.getpropinsirs());
                param.put("kontakrs",akses.getkontakrs());
                param.put("emailrs",akses.getemailrs());
//                Valid.MyReportqry("rptAntriLoket.jasper","report","::[ Antrian Loket ]::",
//                       "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
                try {
                String printFileName = null;
                String sourceFileName = "./report/rptAntriLoket.jasper";
                String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ";
                ps = koneksi.prepareStatement(sql);
                rs = ps.executeQuery();
                JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
	//JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                JasperPrintManager.printReport(printFileName, false);
                autonomer();
                }catch(Exception e){
                    System.out.println("Error : "+e.getMessage());
                }
                this.setCursor(Cursor.getDefaultCursor());
                autonomer();
            }else{
                autonomer();
                if(Sequel.menyimpantf("antriloketcetak","current_date(),current_time(),'"+LabelNomor.getText()+"'","Nomor Antrian")==true){
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    Map<String, Object> param = new HashMap<>();
                    param.put("namars",akses.getnamars());
                    param.put("alamatrs",akses.getalamatrs());
                    param.put("kotars",akses.getkabupatenrs());
                    param.put("propinsirs",akses.getpropinsirs());
                    param.put("kontakrs",akses.getkontakrs());
                    param.put("emailrs",akses.getemailrs());
//                    Valid.MyReportqry("rptAntriLoket.jrxml","report","::[ Antrian Loket ]::",
//                           "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ",param);
//                    this.setCursor(Cursor.getDefaultCursor());
                    try {
                        String printFileName = null;
                        String sourceFileName = "./report/rptAntriLoket.jasper";
                        String sql = "select date_format(antriloketcetak.tanggal,'%d-%m-%Y') as tanggal,antriloketcetak.nomor,antriloketcetak.jam from antriloketcetak where antriloketcetak.tanggal=current_date and antriloketcetak.nomor='"+LabelNomor.getText()+"' ";
                        ps = koneksi.prepareStatement(sql);
                        rs = ps.executeQuery();
                        JRResultSetDataSource rsdt = new JRResultSetDataSource(rs);
                        printFileName = JasperFillManager.fillReportToFile(sourceFileName, param, rsdt);
                //JasperPrint jasperPrint = JasperFillManager.fillReport(jr, param,rsdt);
                        JasperPrintManager.printReport(printFileName, false);
                        autonomer();
                        }catch(Exception e){
                            System.out.println("Error : "+e.getMessage());
                        }             
                }
            }
        }
    }//GEN-LAST:event_BtnCetakActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        autonomer();
        try{            
            ps=koneksi.prepareStatement("select nama_instansi, alamat_instansi, kabupaten, propinsi, aktifkan, wallpaper,kontak,email,logo from setting");
            try {
                rs=ps.executeQuery();
                while(rs.next()){
                    akses.setnamars(rs.getString("nama_instansi"));
                    akses.setalamatrs(rs.getString("alamat_instansi"));
                    akses.setkabupatenrs(rs.getString("kabupaten"));
                    akses.setpropinsirs(rs.getString("propinsi"));
                    akses.setkontakrs(rs.getString("kontak"));
                    akses.setemailrs(rs.getString("email"));
                }  
            } catch (Exception e) {
                System.out.println(e);
            } finally{
                if(rs!=null){
                    rs.close();
                }
                if(ps!=null){
                    ps.close();
                }
            }                 
        }catch(Exception e){
            System.out.println("Notifikasi : Silahkan Set Aplikasi "+e);
        }
    }//GEN-LAST:event_formWindowOpened

    private void BtnCetak1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCetak1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnCetak1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUtama().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCetak;
    private widget.Button BtnCetak1;
    private widget.Label LabelNomor;
    private widget.Label LabelNomor1;
    private widget.Label LabelTanggal;
    private widget.InternalFrame internalFrame1;
    private widget.InternalFrame internalFrame2;
    private widget.PanelGray panelGray1;
    private widget.PanelGray panelGray2;
    // End of variables declaration//GEN-END:variables
    private void jam(){
        ActionListener taskPerformer = new ActionListener(){
            private int nilai_jam;
            private int nilai_menit;
            private int nilai_detik;
            public void actionPerformed(ActionEvent e) {
                String nol_jam = "";
                String nol_menit = "";
                String nol_detik = "";
                Date now = Calendar.getInstance().getTime();
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");  
                LocalDateTime sekarang = LocalDateTime.now();  
                LabelTanggal.setText("Antrian Loket Pendaftaran Tanggal : "+dtf.format(sekarang)); 
//                LabelTanggal1.setText("Antrian Loket Pendaftaran Tanggal : "+dtf.format(sekarang)); 
                // Mengambil nilaj JAM, MENIT, dan DETIK Sekarang
                nilai_jam = now.getHours();
                nilai_menit = now.getMinutes();
                nilai_detik = now.getSeconds();
                // Jika nilai JAM lebih kecil dari 10 (hanya 1 digit)
                if (nilai_jam <= 9) {
                    // Tambahkan "0" didepannya
                    nol_jam = "0";
                }
                // Jika nilai MENIT lebih kecil dari 10 (hanya 1 digit)
                if (nilai_menit <= 9) {
                    // Tambahkan "0" didepannya
                    nol_menit = "0";
                }
                // Jika nilai DETIK lebih kecil dari 10 (hanya 1 digit)
                if (nilai_detik <= 9) {
                    // Tambahkan "0" didepannya
                    nol_detik = "0";
                }
                // Membuat String JAM, MENIT, DETIK
                String jam = nol_jam + Integer.toString(nilai_jam);
                String menit = nol_menit + Integer.toString(nilai_menit);
                String detik = nol_detik + Integer.toString(nilai_detik);
                if(menit.equals("01")&&detik.equals("01")){
                    autonomer();
                }
            }
        };
        // Timer
        new Timer(1000, taskPerformer).start();
    }
    
    private void autonomer(){
        Valid.autoNomer3("select ifnull(MAX(CONVERT(antriloketcetak.nomor,signed)),0) from antriloketcetak where antriloketcetak.tanggal=current_date()","",3,LabelNomor);
    }
   
    private void printCard(String no) {

        PrinterJob printjob = PrinterJob.getPrinterJob();
        printjob.setJobName("Label");

        Printable printable = new Printable() {

                public int print(Graphics pg, PageFormat pf, int pageNum) {

                        if (pageNum > 0) {
                                return Printable.NO_SUCH_PAGE;
                        }
                        Graphics2D g2d = (Graphics2D)pg;
                        g2d.translate(pf.getImageableX(), pf.getImageableY());
        /* Now we perform our rendering */

                        pg.setFont(new Font("Roman", 0, 8));
                        pg.drawString("AAA", 0, 10);

//                        Dimension size = jLayeredPane2.getSize();
//                        BufferedImage bufferedImage = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_RGB);
//
//                        jLayeredPane2.print(bufferedImage.getGraphics());
//
//                        Graphics2D g2 = (Graphics2D) pg;
//                        g2.translate(pf.getImageableX(), pf.getImageableY());
//                        g2.drawImage(bufferedImage, 0, 0, (int) pf.getWidth(), (int) pf.getHeight(), null);

                        return Printable.PAGE_EXISTS;
                }
        };

        Paper paper = new Paper();
        paper.setImageableArea(0, 0, 153, 243);
        paper.setSize(243, 154);

        PageFormat format = new PageFormat();
        format.setPaper(paper);
        format.setOrientation(PageFormat.LANDSCAPE);

        printjob.setPrintable(printable, format);
//        if (printjob.printDialog() == false)
//                return;

        try {
                printjob.print();
        } catch (PrinterException ex) {
                System.out.println("NO PAGE FOUND." + ex);

        }
    }
}

